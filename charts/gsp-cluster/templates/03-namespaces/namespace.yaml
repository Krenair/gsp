{{- $clusterName := .Values.global.cluster.name }}
{{- range .Values.namespaces }}
{{- $ns := . }}
{{- $trustedGithubAccounts := list }}
{{- $trustedGPGKeys := list }}
{{- range $.Values.users }}
  {{- $user := . }}
  {{- range .roles }}
    {{- if and (hasPrefix $clusterName .) (hasSuffix "-sre" .) }}
      {{- $trustedGithubAccounts = append $trustedGithubAccounts $user.github }}
      {{- $trustedGPGKeys = append $trustedGPGKeys $user.pub }}
    {{- else if and (hasPrefix $clusterName .) (hasSuffix "-admin" .) }}
      {{- $trustedGithubAccounts = append $trustedGithubAccounts $user.github }}
      {{- $trustedGPGKeys = append $trustedGPGKeys $user.pub }}
    {{- else if and (hasPrefix $ns.name .) (hasSuffix "-dev" .) }}
      {{- $trustedGithubAccounts = append $trustedGithubAccounts $user.github }}
      {{- $trustedGPGKeys = append $trustedGPGKeys $user.pub }}
    {{- end }}
  {{- end }}
{{- end }}
{{- range .resources }}
---
{{ tpl (toYaml .) $ }}
{{- end }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{ .name }}
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services", "pods/log", "services/proxy", "namespaces"]
  verbs: ["get", "watch", "list", "describe"]
- apiGroups: [""]
  resources: ["pods/portforward"]
  verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-pod-reader
  namespace: {{ .name }}
subjects:
- kind: Group
  name: {{ .name }}-dev
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: concourse.k8s.io/v1beta1
kind: Team
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: {{ trimPrefix (printf "%s-" $clusterName) .name }}
  namespace: {{ .name }}
spec:
  roles:
  - name: owner
    local:
      users: ["pipeline-operator"]
  - name: pipeline-operator
    github:
      users: {{ (toJson (uniq $trustedGithubAccounts)) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: trusted-developers
  namespace: {{ .name }}
data:
  github-accounts: {{ (toJson (uniq $trustedGithubAccounts)) | b64enc }}
  gpg-keys: {{ (toJson (uniq $trustedGPGKeys)) | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: harbor
  namespace: {{ .name }}
data:
  root_key: {{ $.Values.notary.rootKey | b64enc }}
  ci_key: {{ $.Values.notary.delegationKey | b64enc }}
  harbor_username: {{ "admin" | b64enc }}
  harbor_password: {{ $.Values.harbor.harborAdminPassword | b64enc }}
  harbor_url: {{ (printf "https://registry.%s" $.Values.global.cluster.domain) | b64enc }}
  notary_root_passphrase: {{ $.Values.notary.rootPassphrase | b64enc }}
  notary_targets_passphrase: {{ $.Values.notary.targetsPassphrase | b64enc }}
  notary_snapshot_passphrase: {{ $.Values.notary.snapshotPassphrase | b64enc }}
  notary_delegation_passphrase: {{ $.Values.notary.delegationPassphrase | b64enc }}
  notary_url: {{ (printf "https://notary.%s" $.Values.global.cluster.domain) | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: cluster
  namespace: {{ .name }}
data:
  name: {{ $.Values.global.cluster.name | b64enc }}
  domain: {{ $.Values.global.cluster.domain | b64enc }}
  privateKey: {{ $.Values.global.cluster.privateKey | b64enc }}
  publicKey: {{ $.Values.global.cluster.publicKey | b64enc }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: concourse
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $.Release.Name }}-concourse-web
subjects:
- kind: ServiceAccount
  name: {{ $.Release.Name }}-concourse-web
  namespace: {{ $.Release.Namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: github
  namespace: {{ .name }}
data:
  api-token: {{ $.Values.githubAPIToken | b64enc }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: namespace-deployer
  namespace: {{ .name }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .name }}-namespace-deployer
  namespace: {{ .name }}
subjects:
- kind: ServiceAccount
  name: namespace-deployer
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .name }}-cluster-viewer
subjects:
- kind: ServiceAccount
  name: namespace-deployer
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-viewer
---
apiVersion: v1
kind: Secret
metadata:
  name: namespace-deployer
  namespace: {{ .name }}
  annotations:
    "kubernetes.io/service-account.name": namespace-deployer
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-deployer
  namespace: {{ .name }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .name }}-cluster-deployer
subjects:
- kind: ServiceAccount
  name: cluster-deployer
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
apiVersion: v1
kind: Secret
metadata:
  name: cluster-deployer
  namespace: {{ .name }}
  annotations:
    "kubernetes.io/service-account.name": cluster-deployer
type: kubernetes.io/service-account-token
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress-to-istio-system-and-kube-dns
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kube-system: "true"
    ports:
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          istio: system
{{- end }}
